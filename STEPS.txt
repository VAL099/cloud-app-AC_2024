1. Se creeaza un cluster in Kubernetes Engine
1.1 Se configureaza CLI => `gcloud container clusters get-credentials <cluster_name>`
2. Se creeaza un repozitoriu in Artifact Registry
3. Se creeaa un Trigger in Cloud Build (push to branch main)

4. Se creeaza deploy scripturi (mapa _deploy). Aici avem un crearea unui pipeline pentru Cloud Deploy Service (prod e pentru a arata pe care cluster)
5. Se creeaza kubernetes pod deployment script si service creation script care creeaza serviciu din pod in mapa _kube

6. Se creeaza cloudbuild.yaml (pipeline-ul principal)

7. Configuram contul de service in IAM & Admin 
    setam uramtoarele permisiuni:   Cloud Build Editor
                                    Cloud Build WorkerPool User
                                    Cloud Deploy Admin
                                    Editor
                                    Kubernetes Engine Developer
                                    Owner
                                    Service Account User

8. Facem push pe Git si se porneste treaba

9. Dupa build reusit, in Cloud Shell scriem `kubectl get services` => External IP is our's service IP

10. Autoscaling pct.10, se configureaza cind creezi cluster-ul. Total limits => min=1, max=num_replicas
11. Rollback -> It's not gonna deploy if someting is broken
12. No downtime => Node pool upgrade strategy => max_unavailable=0 max_surge=2

# THE Following code is a draft  and will be deleted after implimentation:


echo "Deploying to GKE"

        if gcloud deploy apply --file _deploy/pipeline.yaml --region=${_REGION} &&
           gcloud deploy apply --file _deploy/prod.yaml --region=${_REGION}; then
          echo "Deployment successful."
        else
          echo "Deployment failed. Rolling back to previous version."
          gcloud deploy releases rollback ${_LAST_SUCCESSFUL_RELEASE_NAME} \
          --delivery-pipeline=${_PIPELINE_NAME} \
          --region=${_REGION}
        fi